package com.ust.retail.store.pim.model.purchaseorder;

import com.ust.retail.store.pim.common.catalogs.PoStatusCatalog;
import com.ust.retail.store.pim.dto.purchaseorder.operation.PurchaseOrderAddProductRequestDTO;
import com.ust.retail.store.pim.dto.purchaseorder.operation.PurchaseOrderSaveRequestDTO;
import com.ust.retail.store.pim.dto.vendormaster.VendorMasterDTO;
import com.ust.retail.store.pim.model.catalog.CatalogModel;
import com.ust.retail.store.pim.model.catalog.StoreNumberModel;
import com.ust.retail.store.pim.model.general.Audits;
import com.ust.retail.store.pim.model.security.UserModel;
import com.ust.retail.store.pim.model.vendormaster.VendorMasterModel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

@Entity
@Table(name = "purchase_orders")
@EntityListeners(AuditingEntityListener.class)
@Getter
@NoArgsConstructor
public class PurchaseOrderModel extends Audits implements Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "purchase_order_id")
	private Long purchaseOrderId;

	@Column(name = "purchase_order_num", unique = true, length = 100)
	private String purchaseOrderNum;

	@Column(name = "total_cost")
	private Double totalCost;

	@Column(name = "discount")
	private Double discount;

	@Column(name = "applied_vendor_credit")
	private Double appliedVendorCredit;

	@Column(name = "final_cost")
	private Double finalCost;

	@Column(name = "suggested_eta")
	private Date suggestedEta;

	@Column(name = "eta")
	private Date eta;

	@Column(name = "vendor_moq")
	private Double vendorMoq;

	@Column(name = "vendor_cutoff_day")
	private Integer vendorCutOffDay;

	@Column(name = "vendor_shipment_day")
	private Integer vendorShipmentDay;

	@Column(name = "vendor_eta")
	private Integer vendorEta;

	@Column(name = "order_under_moq")
	private boolean orderUnderMoq = false;

	@Column(name = "sent_at")
	private Date sentAt;

	@Column(name = "autogenerated")
	private boolean autogenerated = false;

	@Column(name = "shipping_options")
	private String shippingOptions;

	@Column(name = "notes")
	private String notes;

	@Column(name = "reception_date")
	private Date receptionDate;

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "vendor_master_id", referencedColumnName = "vendor_master_id")
	private VendorMasterModel vendorMaster;

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "po_status_id", referencedColumnName = "catalog_id")
	private CatalogModel status;

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "store_num_id", referencedColumnName = "store_num_id")
	private StoreNumberModel storeNumber;

	@OneToMany(
			mappedBy = "purchaseOrder",
			cascade = CascadeType.ALL,
			orphanRemoval = true
	)
	private List<PurchaseOrderDetailModel> details = new ArrayList<>();

	public PurchaseOrderModel(
			PurchaseOrderAddProductRequestDTO dto,
			PurchaseOrderDetailModel detailModel,
			VendorMasterDTO vendor,
			Long userId,
			@NotBlank String purchaseOrderNum,
			Date suggestedEta) {
		this.vendorMaster = new VendorMasterModel(vendor.getVendorMasterId());
		this.status = new CatalogModel(PoStatusCatalog.PO_STATUS_DRAFT);
		this.storeNumber = new StoreNumberModel(dto.getStoreNumId());
		this.suggestedEta = suggestedEta;
		this.userCreate = new UserModel(userId);
		this.purchaseOrderNum = purchaseOrderNum;
		this.eta = suggestedEta;
		this.vendorMoq = vendor.getMoq();
		this.vendorCutOffDay = vendor.getCutOffDay();
		this.vendorShipmentDay = vendor.getShipmentDay();
		this.vendorEta = vendor.getEta();
		this.appliedVendorCredit = 0d;
		this.autogenerated = dto.isAutogenerated();
		addDetail(detailModel);
		updateCalculations(false);
	}

	public void setDraftInformation(PurchaseOrderSaveRequestDTO dto) {
		this.status = new CatalogModel(PoStatusCatalog.PO_STATUS_DRAFT);
		this.storeNumber = new StoreNumberModel(dto.getStoreNumId());
		this.appliedVendorCredit = dto.getAppliedVendorCredit();
		this.sentAt = null;
		this.eta = dto.getEta();
		this.shippingOptions = dto.getShippingOptions();
		this.notes = dto.getNotes();
		updateCalculations(false);
	}

	public void setPendingAuthorizationInformation(PurchaseOrderSaveRequestDTO dto) {
		this.status = new CatalogModel(PoStatusCatalog.PO_STATUS_PENDING_AUTHORIZATION);
		this.storeNumber = new StoreNumberModel(dto.getStoreNumId());
		this.appliedVendorCredit = dto.getAppliedVendorCredit();
		this.sentAt = null;
		this.eta = dto.getEta();
		this.shippingOptions = dto.getShippingOptions();
		this.notes = dto.getNotes();
		updateCalculations(true);
	}

	public void updatePurchaseOrderRevision(String purchaseOrderNum, Date suggestedEta) {
		this.purchaseOrderNum = purchaseOrderNum;
		this.suggestedEta = suggestedEta;
		this.status = new CatalogModel(PoStatusCatalog.PO_STATUS_DRAFT);
		updateCalculations(false);
	}

	public void setProcessedInformation(PurchaseOrderSaveRequestDTO dto, Date sentAt) {
		this.status = new CatalogModel(PoStatusCatalog.PO_STATUS_ORDERED);
		this.storeNumber = new StoreNumberModel(dto.getStoreNumId());
		this.appliedVendorCredit = dto.getAppliedVendorCredit();
		this.eta = dto.getEta();
		this.sentAt = sentAt;
		this.shippingOptions = dto.getShippingOptions();
		this.notes = dto.getNotes();
		updateCalculations(true);
	}

	public void updateCalculations(boolean applyVendorCredit) {
		this.totalCost = details.stream().filter(Objects::nonNull).mapToDouble(PurchaseOrderDetailModel::getOriginalCost).sum();
		this.discount = details.stream().filter(Objects::nonNull).mapToDouble(PurchaseOrderDetailModel::getDiscount).sum();
		this.finalCost = details.stream().filter(Objects::nonNull).mapToDouble(PurchaseOrderDetailModel::getFinalCost).sum();
		if (applyVendorCredit) {
			this.finalCost -= this.appliedVendorCredit;
		}
		this.orderUnderMoq = finalCost < vendorMoq;
	}

	public void addDetail(PurchaseOrderDetailModel detail) {
		details.add(detail);
		detail.setPurchaseOrder(this);
	}

	public void removeDetail(PurchaseOrderDetailModel detail) {
		details.remove(detail);
		detail.setPurchaseOrder(null);
	}

	public void setPurchaseOrderStatus(Long purchaseOrderStatusId) {
		this.status = new CatalogModel(purchaseOrderStatusId);
	}

	public void setReceptionDate(Date receivedDate) {
		this.receptionDate = receivedDate;
	}
}
