package com.ust.retail.store.pim.repository.puchaseorder;

import com.ust.retail.store.pim.dto.purchaseorder.operation.FulfillmentCandidateDTO;
import com.ust.retail.store.pim.dto.purchaseorder.screens.PurchaseOrderPendingFulfillmentDTO;
import com.ust.retail.store.pim.model.purchaseorder.PurchaseOrderModel;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;

public interface PurchaseOrderFulfillmentRepository extends JpaRepository<PurchaseOrderModel, Long> {

	@Query("SELECT new com.ust.retail.store.pim.dto.purchaseorder.screens.PurchaseOrderPendingFulfillmentDTO("
			+ "p.purchaseOrderId, "
			+ "p.purchaseOrderNum, "
			+ "p.sentAt, "
			+ "p.eta, "
			+ "p.storeNumber.storeNumId, "
			+ "p.storeNumber.storeName)"
			+ " FROM PurchaseOrderModel p JOIN p.details d"
			+ " WHERE p.status.catalogId = ?1"
			+ "   AND d.upcMaster.upcMasterId = ?2")
	List<PurchaseOrderPendingFulfillmentDTO> findByStatusAndProduct(Long statusId, Long upcMasterId);

	@Query("SELECT new com.ust.retail.store.pim.dto.purchaseorder.operation.FulfillmentCandidateDTO("
			+ " uvd.vendorMaster.vendorMasterId,"
			+ " sl.storeNumber.storeNumId,"
			+ " pm.upcMasterId,"
			+ " pm.stockMin,"
			+ " po.purchaseOrderId,"
			+ " pod.purchaseOrderDetailId,"
			+ " COALESCE(pod.totalAmount, 0),"
			+ " SUM(i.qty))"
			+ " FROM InventoryModel i"
			+ "     JOIN i.upcMaster pm"
			+ "     JOIN i.storeLocation sl"
			+ "     JOIN UpcVendorDetailsModel uvd ON pm = uvd.upcMaster AND uvd.defaultVendor = true"
			+ "     JOIN uvd.storeCosts sc ON sc.storeNumber = sl.storeNumber"
			+ "     LEFT JOIN PurchaseOrderModel po ON sl.storeNumber = po.storeNumber"
			+ "         AND uvd.vendorMaster = po.vendorMaster "
			+ "         AND po.status.catalogId = ?1"
			+ "         AND po.autogenerated = true"
			+ "     LEFT JOIN PurchaseOrderDetailModel pod ON pod.purchaseOrder.purchaseOrderId = po.purchaseOrderId"
			+ "         AND i.upcMaster = pod.upcMaster"
			+ " WHERE pm.upcMasterStatus.catalogId = ?2"
			+ " GROUP BY sl.storeNumber, pm, uvd.vendorMaster, po, pod"
	)
	List<FulfillmentCandidateDTO> getReorderCandidates(Long poDraftStatusId, Long upcActiveStatusId);
}
